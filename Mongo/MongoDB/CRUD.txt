DATABASES
Show all databases available on our current MongoDB server	show dbs
Show current database selected	Example:			db
Change to another database
Note: If the database you're trying to switch to does not exist, 
Mongo shell will create a new database and switch to it.	use DB_NAME
Delete database							db.dropDatabase() 
							will delete the current database in use.

COLLECTIONS
View all collections in a MongoDB			Example:show collections
Create a new collection in the current database		Pattern:db.createCollection("COLLECTION_NAME")
Destroy a collection 					Pattern:db.COLLECTION_NAME.drop()



db.students.insert({name: 'Tess', home_state: 'SR', lucky_number: 13, birthday: {month: 11, day: 13, year: 1990}})



CREATE - Inserting a document into a collection:
// Pattern:
db.COLLECTION_NAME.insert({YOUR_JSON_DOCUMENT})  
 
// Example:
db.ninjas.insert({name: "Trey", belt: "black", status: "awesome"})

READ - Retrieving documents from a collection:
// Pattern: 
db.COLLECTION_NAME.find({YOUR_QUERY_DOCUMENT})
// Example:
db.ninjas.find({name: "Trey"})
db.ninjas.find({})  ---- return all
// Example:
db.ninjas.find({_id: ObjectId("5462a78e514e258182f4c69a")})
// Notice: You can't just pass the string of characters, you must pass it as an ObjectId.
HINT: if you want to sort by something like creation time in MongoDB, 
you can sort by ObjectId because it is made by using a time stamp as part of the string.

db.ninjas.find().pretty() -- to display as object

DESTROY - Removing documents from a collection:
// Pattern:
db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)
// Example
db.ninjas.remove({belt: "yellow"}) 		//delete the first matching record
db.ninjas.remove({belt: "yellow"}, false) 	// this query would have the same effect as the one above.
db.ninjas.remove({belt: "yellow"}, true) 	// this query will remove all that match
db.users.drop() 				//drop the whole collection

UPDATE - Updating documents in a collection:
// Pattern:
db.COLLECTION_NAME.update({QUERY}, {FIELDS_TO_UPDATE}, {OPTIONS})  
// Note: the options document is optional
// Example:
db.ninjas.update({name: "Trey"}, {$set: {location: "Mountain View"}})
if you don't include $set, it will overwrite everything in that entry

OPERATORS https://docs.mongodb.com/manual/reference/operator/query/
db.dojos.find({number_of_students: {$gt: 15}})
$gt (greater than)		Use to query selectively on numerical-valued fields
$gte (greater than or equal to)	Use to query selectively on numerical-valued fields
$lt (less than)			Use to query selectively on numerical-valued fields
$lte (less than or equal to)	Use to query selectively on numerical-valued fields
$in (in array)			Use to find documents who have a particular value within an array.

$push		Push to an array contained within a document.
$pop		Removes either the first or last element from an array. EX:
		db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})
  
	Use 1 for the last item in the array, -1 for the first item.

$addToSet	It functions just like $push.  
		However, $addToSet only adds to the specified array 
		if the value doesn't already exist (thereby preventing duplicate entries).
$pull		Removes a specified value from an array, unlike $pop, which removes by location. Ex:
		db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})
  		This will remove all instances of VALUE from the documents 
		with the array specified by the array_key that match QUERY.

db.students.find({'lucky_number':{$gt:3}})
db.students.find({})

db.students.updateMany({},{$set:{'interests':['Coding','brunch', 'MongoDB']}})
db.students.update({}, {$set: {"isOpen": false}}, false, true)
db.students.remove({name:"Frank"})
db.students.update({name:'Tim'},{$unset:{interests:1}})
db.students.update({name:'Tim'},{$set:{updated:new Date()}})







